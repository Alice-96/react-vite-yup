name: Visual Regression Test Report

on:
  pull_request:
    branches: [main]

jobs:
  vrt-report:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Build application
        run: pnpm build

      - name: Get baseline screenshots from main
        run: |
          git checkout origin/main -- vrt/
          mkdir -p visual-regression/expected
          find vrt -name "*.png" -exec cp {} visual-regression/expected/ \;

      - name: Checkout current branch
        run: git checkout ${{ github.head_ref }}

      - name: Run VRT tests and capture actual screenshots
        continue-on-error: true
        run: |
          pnpm test:vrt || true
          mkdir -p visual-regression/actual
          find test-results -name "*-actual.png" -exec cp {} visual-regression/actual/ \;

      - name: Generate VRT report with reg-cli
        run: |
          npx reg-cli visual-regression/actual visual-regression/expected visual-regression/diff --json visual-regression/report.json --report visual-regression/report.html || true

      - name: Upload VRT report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vrt-report-${{ github.event.number }}
          path: visual-regression/
          retention-days: 30

      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./visual-regression
          destination_dir: pr-${{ github.event.number }}

      - name: Comment PR with VRT results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = './visual-regression/report.json';
            
            let reportData = {};
            let reportUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}/report.html`;
            
            try {
              if (fs.existsSync(path)) {
                reportData = JSON.parse(fs.readFileSync(path, 'utf8'));
              }
            } catch (error) {
              console.log('Could not read report.json:', error);
            }

            const newComment = `
            ## 📸 Visual Regression Test Results
            
            ${reportData.failedItems?.length > 0 ? '❌ Visual differences detected' : '✅ No visual differences detected'}
            
            ### 📊 Summary
            - Screenshots compared: ${reportData.passedItems?.length + reportData.failedItems?.length || 'N/A'}
            - Passed: ${reportData.passedItems?.length || 0}
            - Failed: ${reportData.failedItems?.length || 0}
            
            ${reportData.failedItems?.length > 0 ? `
            ### 🖼️ Screenshot Differences
            ${reportData.failedItems.map(item => `- 📸 **${item.name}**: Difference detected`).join('\n')}
            ` : ''}
            
            ### 🔍 View Detailed Report
            [📋 Open Visual Diff Report](${reportUrl})
            
            ### 📥 Download Artifacts
            [Download VRT Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${reportData.failedItems?.length > 0 ? `
            ### ✅ If changes are intentional:
            \`\`\`bash
            pnpm test:vrt:update
            git add vrt/
            git commit -m "Update VRT baselines"
            \`\`\`
            ` : ''}
            `;

            // 既存のコメントを検索
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('📸 Visual Regression Test Results')
            );

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: newComment
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: newComment
              });
            }